# Import necessary  
import pandas as pd,,,,,
import numpy as np,,,,,
import matplotlib.pyplot as plt,,,,,
from statsmodels.tsa.arima.model import ARIMA,,,,,
from sklearn.metrics import mean_squared_error,,,,,
# Load your dataset (replace with your actual dataset)
# Assuming your data has two columns: 'Date' and 'Demand' (e.g., number of charges)
df = pd.read_csv('ev_charging_data.csv', parse_dates=['Date'], index_col='Date'),,,
# Plot the demand data
plt.figure(figsize=(10, 5)),,,,
plt.plot(df['Demand'], label='Charging Demand'),,,,
plt.title('Electric Vehicle Charging Demand Over Time'),,,,,
plt.xlabel('Date'),,,,,
plt.ylabel('Demand'),,,,,
plt.legend(),,,,,
plt.show(),,,,,
# Split the data into train and test sets
train_size = int(len(df) * 0.8),,,,,
train, test = df[0:train_size], df[train_size:],,,
# Fit ARIMA model
model = ARIMA(train['Demand'], order=(5, 1, 0))  # (p,d,q) parameters can be optimized based on AIC/BIC
model_fit = model.fit(),,,,,
# Print model summary
print(model_fit.summary()),,,,,
# Make predictions
forecast = model_fit.forecast(steps=len(test)),,,,,
# Plot the forecast vs actual demand
plt.figure(figsize=(10, 5)),,,,
plt.plot(train.index, train['Demand'], label='Training Data'),,,
plt.plot(test.index, test['Demand'], label='Actual Demand'),,,
plt.plot(test.index, forecast, label='Forecasted Demand', color='red'),,
plt.title('Actual vs Forecasted Charging Demand'),,,,,
plt.xlabel('Date'),,,,,
plt.ylabel('Demand'),,,,,
plt.legend(),,,,,
plt.show(),,,,,
# Calculate error
mse = mean_squared_error(test['Demand'], forecast),,,,
print(f'Mean Squared Error: {mse}'),,,,,
